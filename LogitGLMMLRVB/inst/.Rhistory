stopifnot(min(diag(lrvb_cov)) > 0)
vp_mom <- GetMomentParametersFromNaturalParameters(vp_nat_fit)
lrvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(lrvb_cov)), FALSE)
mfvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(mfvb_cov)), FALSE)
results <- SummarizeResults(mcmc_sample, vp_mom, mfvb_sd, lrvb_sd)
results$n_sim <- n_sim
results$fit_time <- fit_time
n_sim_results[[as.character(n_sim)]] <- results
}
source('~/Documents/git_repos/variational_bayes/logit_glmm/LogitGLMMLRVB/inst/black_box.R', echo=TRUE)
n_sim
print("----------------------------")
print(n_sim)
print("----------------------------\n")
opt <- GetOptions(n_sim=n_sim)
optim_fns <- OptimFunctions(y, y_g, x, vp_nat, pp, opt, verbose=FALSE)
fit_time <- Sys.time()
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
# Newton's method to finish it off.
cat("Newton's method.")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=2)
# Debugging
hess2 <- optim_fns$OptimHess(theta)
hess2_ev <- eigen(hess2)
max_ev2 <- max(hess2_ev$values)
cat("Max_ev = ", max_ev2, " performing linesearch.\n")
# Look at the direction of the positive eigenvector
v <- hess2_ev$vectors[, 1]
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
}
qplot(epsilon_grid, f_vals - optim_fns$OptimVal(theta))
max_ev2
max_ind <- which.max(hess2_ev$values)
max_ind
max_ind <- which.max(hess2_ev$values)
v <- hess2_ev$vectors[, max_ind]
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
}
qplot(epsilon_grid, f_vals - optim_fns$OptimVal(theta))
grad2 <- optim_fns$OptimGrad(theta)
grad2
fit_time <- Sys.time()
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
grad2 <- optim_fns$OptimGrad(theta)
grad2
slope <- sum(grad2, v)
slope
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, slope_vals)
v <- hess2_ev$vectors[, max_ind]
slope <- sum(grad2, v)
qplot(epsilon_grid, f_vals - f0)
qplot(epsilon_grid, slope_vals)
fit_time <- Sys.time()
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1e-12))
theta <- optim_result$par
hess2 <- optim_fns$OptimHess(theta)
grad2 <- optim_fns$OptimGrad(theta)
hess2_ev <- eigen(hess2)
max_ev2 <- max(hess2_ev$values)
cat("Max_ev = ", max_ev2, " performing linesearch.\n")
# Look at the direction of the positive eigenvector
max_ind <- which.max(hess2_ev$values)
v <- hess2_ev$vectors[, max_ind]
slope <- sum(grad2, v)
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
slope
max_ev2
print(max_ev2)
max(hess2_ev$values) / min(hess2_ev$values)
max(abs(hess2_ev$values)) / min(abs(hess2_ev$values))
grad2
ls_grad <- LineSearch(optim_fns$OptimVal, optim_fns$OptimGrad, theta, grad, verbose=TRUE, fn_scale=-1)
ls_grad <- LineSearch(optim_fns$OptimVal, optim_fns$OptimGrad, theta, grad2, verbose=TRUE, fn_scale=-1)
ls_grad
ls_grad$x
optim_fns$OptimVal(ls_grad$x)
optim_fns$OptimVal(ls_grad$x) - optim_fns$OptimVal(theta)
optim_fns$OptimVal(ls_grad$x) - optim_fns$OptimVal(theta)
v <- grad
slope <- sum(grad2, v)
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
v <- grad2
slope <- sum(grad2, v)
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
grad2
v <- grad2
slope <- sum(grad2, v)
width <- 50
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
width <- 10
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
v <- hess2_ev$vectors[, max_ind]
#v <- grad2
slope <- sum(grad2, v)
width <- 10
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
cbind(v, grad)
cbind(v, grad2)
cbind(v, grad2 / sqrt(sum(grad2 * grad2)))
v_direction <- GetNaturalParametersFromVector(vp_nat, v, FALSE)
v_direction
sum(grad2 * v)
sign(sum(grad2 * v))
direction <- sign(sum(grad2 * v))
v <- sign(sum(grad2 * ev)) * v
ev <- hess2_ev$vectors[, max_ind]
v <- sign(sum(grad2 * ev)) * v
#v <- grad2
slope <- sum(grad2, v)
width <- 10
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
# qplot(epsilon_grid, slope_vals)
ls_res <- LineSearch(optim_fns$OptimVal, optim_fns$OptimGrad, theta, v, verbose=TRUE, fn_scale=-1)
source('~/Documents/git_repos/variational_bayes/logit_glmm/LogitGLMMLRVB/inst/optimize_lib.R', echo=TRUE)
fit_time <- Sys.time()
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
source('~/Documents/git_repos/variational_bayes/logit_glmm/LogitGLMMLRVB/inst/optimize_lib.R', echo=TRUE)
# Newton's method to finish it off.
cat("Newton's method.")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
source('~/Documents/git_repos/variational_bayes/logit_glmm/LogitGLMMLRVB/inst/optimize_lib.R', echo=TRUE)
source('~/Documents/git_repos/variational_bayes/logit_glmm/LogitGLMMLRVB/inst/optimize_lib.R', echo=TRUE)
# Newton's method to finish it off.
cat("Newton's method.")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
fit_time <- Sys.time() - fit_time
optim_fns$OptimVal(newton_result$theta) - optim_fns$OptimVal(optim_result$par)
hess <- optim_fns$OptimHess(newton_result$theta)
hess_ev <- eigen(hess)
max_ev <- max(hess_ev$values)
stopifnot(max_ev < 1e-8)
vp_nat_fit <- GetNaturalParametersFromVector(vp_nat, newton_result$theta, TRUE)
mfvb_cov <- GetCovariance(vp_nat_fit)
lrvb_cov <- GetLRVBCovariance(y, y_g, x, vp_nat_fit, pp, opt)
stopifnot(min(diag(lrvb_cov)) > 0)
vp_mom <- GetMomentParametersFromNaturalParameters(vp_nat_fit)
lrvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(lrvb_cov)), FALSE)
mfvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(mfvb_cov)), FALSE)
n_sim_results <- list()
for (n_sim in c(3, 5, 8, 10, 15, 20)) {
print("----------------------------")
print(n_sim)
print("----------------------------\n")
opt <- GetOptions(n_sim=n_sim)
optim_fns <- OptimFunctions(y, y_g, x, vp_nat, pp, opt, verbose=FALSE)
fit_time <- Sys.time()
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
if (FALSE) {
# Debugging
hess2 <- optim_fns$OptimHess(theta)
grad2 <- optim_fns$OptimGrad(theta)
hess2_ev <- eigen(hess2)
max_ev2 <- max(hess2_ev$values)
max(abs(hess2_ev$values)) / min(abs(hess2_ev$values))
print(max_ev2)
cat("Max_ev = ", max_ev2, " performing linesearch.\n")
# Look at the direction of the positive eigenvector
max_ind <- which.max(hess2_ev$values)
ev <- hess2_ev$vectors[, max_ind]
v <- sign(sum(grad2 * ev)) * v
# v_direction <- GetNaturalParametersFromVector(vp_nat, v, FALSE)
#v <- grad2
slope <- sum(grad2, v)
width <- 10
epsilon_grid <- seq(-width, width, length.out=30)
f_vals <- rep(NaN, length(epsilon_grid))
slope_vals <- rep(NaN, length(epsilon_grid))
f0 <- optim_fns$OptimVal(theta)
for (i in 1:length(epsilon_grid)) {
f_vals[i] <- optim_fns$OptimVal(theta + epsilon_grid[i] * v)
slope_vals[i] <- f0 + slope * epsilon_grid[i]
}
qplot(epsilon_grid, f_vals - f0)
# qplot(epsilon_grid, slope_vals)
ls_res <- LineSearch(optim_fns$OptimVal, optim_fns$OptimGrad, theta, v, verbose=TRUE, fn_scale=-1)
# ls_grad <- LineSearch(optim_fns$OptimVal, optim_fns$OptimGrad, theta, grad2, verbose=TRUE, fn_scale=-1)
optim_fns$OptimVal(ls_grad$x) - optim_fns$OptimVal(theta)
}
# Newton's method to finish it off.
cat("Newton's method.")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
fit_time <- Sys.time() - fit_time
optim_fns$OptimVal(newton_result$theta) - optim_fns$OptimVal(optim_result$par)
hess <- optim_fns$OptimHess(newton_result$theta)
hess_ev <- eigen(hess)
max_ev <- max(hess_ev$values)
stopifnot(max_ev < 1e-8)
vp_nat_fit <- GetNaturalParametersFromVector(vp_nat, newton_result$theta, TRUE)
mfvb_cov <- GetCovariance(vp_nat_fit)
lrvb_cov <- GetLRVBCovariance(y, y_g, x, vp_nat_fit, pp, opt)
stopifnot(min(diag(lrvb_cov)) > 0)
vp_mom <- GetMomentParametersFromNaturalParameters(vp_nat_fit)
lrvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(lrvb_cov)), FALSE)
mfvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(mfvb_cov)), FALSE)
results <- SummarizeResults(mcmc_sample, vp_mom, mfvb_sd, lrvb_sd)
results$n_sim <- n_sim
results$fit_time <- fit_time
n_sim_results[[as.character(n_sim)]] <- results
}
names(n_sim_results)
results <- do.call(rbind, n_sim_results)
fit_df <-
filter(results, metric == "mean") %>%
dcast(par + component + group + n_sim ~ method, value.var="val") %>%
mutate(diff2=(mcmc - mfvb) ^ 2)
fit_df
ggplot(fit_df) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
fit_df <-
filter(results, metric == "sd") %>%
dcast(par + component + group + n_sim ~ method, value.var="val") %>%
mutate(diff2=(mcmc - mfvb) ^ 2)
ggplot(fit_df) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
head(results)
unique(results[c("n_sim", "fit_time")])
ggplot(unique(results[c("n_sim", "fit_time")])) +
geom_point(aes(x=n_sim, y=fit_time))
ggplot(unique(results[c("n_sim", "fit_time")])) +
geom_point(aes(x=n_sim, y=fit_time)) +
expand_limits(x=0, y=0)
ggplot(fit_df) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
ggplot(filter(fit_df, n_sim > 5)) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
ggplot(filter(fit_df, n_sim > 3)) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
n_sim_results <- list()
for (n_sim in c(3, 5, 8, 10, 15, 20)) {
print("----------------------------")
print(n_sim)
print("----------------------------\n")
opt <- GetOptions(n_sim=n_sim)
optim_fns <- OptimFunctions(y, y_g, x, vp_nat, pp, opt, verbose=FALSE)
fit_time <- Sys.time()
# Initialize with BFGS and finish with Newton.
cat("BFGS initialization.\n")
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
cat("Newton's method.\n")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
vp_nat_fit <- GetNaturalParametersFromVector(vp_nat, newton_result$theta, TRUE)
mfvb_cov <- GetCovariance(vp_nat_fit)
lrvb_cov <- GetLRVBCovariance(y, y_g, x, vp_nat_fit, pp, opt)
stopifnot(min(diag(lrvb_cov)) > 0)
fit_time <- Sys.time() - fit_time
#   hess <- optim_fns$OptimHess(newton_result$theta)
#   hess_ev <- eigen(hess)
#   max_ev <- max(hess_ev$values)
#   stopifnot(max_ev < 1e-8)
vp_mom <- GetMomentParametersFromNaturalParameters(vp_nat_fit)
lrvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(lrvb_cov)), FALSE)
mfvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(mfvb_cov)), FALSE)
results <- SummarizeResults(mcmc_sample, vp_mom, mfvb_sd, lrvb_sd)
results$n_sim <- n_sim
results$fit_time <- fit_time
n_sim_results[[as.character(n_sim)]] <- results
}
names(n_sim_results)
results <- do.call(rbind, n_sim_results)
fit_df <-
filter(results, metric == "mean") %>%
dcast(par + component + group + n_sim ~ method, value.var="val") %>%
mutate(diff2=(mcmc - mfvb) ^ 2)
# Accuracy
ggplot(filter(fit_df, n_sim > 3)) +
geom_point(aes(x=n_sim, y=diff2, group=paste(par, component, group)))
# Timing
ggplot(unique(results[c("n_sim", "fit_time")])) +
geom_point(aes(x=n_sim, y=fit_time)) +
expand_limits(x=0, y=0)
library(LogitGLMMLRVB)
library(rstan)
library(lme4)
library(dplyr)
library(reshape2)
source(file.path(project_directory, "LogitGLMMLRVB/inst/optimize_lib.R"))
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "variational_bayes/logit_glmm")
analysis_name <- "simulated_data"
data_directory <- file.path(project_directory, "LogitGLMMLRVB/inst/data/")
stan_draws_file <- file.path(data_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
stan_results <- environment()
load(stan_draws_file, envir=stan_results)
mcmc_sample <- extract(stan_results$stan_sim)
true_params <- stan_results$true_params
x <- stan_results$stan_dat$x
k_reg <- ncol(x)
n_obs <- nrow(x)
y <- stan_results$stan_dat$y
y_g <- stan_results$stan_dat$y_g
n_groups <- max(y_g) + 1
# Get C++ versions of the data structures.
prob <- SampleData(n_obs, k_reg, n_groups)
pp <- stan_results$pp
vp_nat <- prob$vp_nat
vp_nat$beta_loc <- rep(0, k_reg)
vp_nat$mu_loc <- 0
vp_nat$tau_alpha <- 2
vp_nat$tau_beta <- 2
for (g in 1:n_groups) {
vp_nat$u_vec[[g]]$u_loc <- 0
vp_nat$u_vec[[g]]$u_info <- 1
}
##############################
# Optimization
opt <- GetOptions(n_sim=15)
bounds <- GetVectorBounds()
optim_fns <- OptimFunctions(y, y_g, x, vp_nat, pp, opt)
theta_init <- GetNaturalParameterVector(vp_nat, TRUE)
fit_time <- Sys.time()
# Initialize with BFGS and finish with Newton.
cat("BFGS initialization.\n")
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
cat("Newton's method.\n")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
vp_nat_fit <- GetNaturalParametersFromVector(vp_nat, newton_result$theta, TRUE)
# LRVB
mfvb_cov <- GetCovariance(vp_nat_fit)
lrvb_cov <- GetLRVBCovariance(y, y_g, x, vp_nat_fit, pp, opt)
stopifnot(min(diag(lrvb_cov)) > 0)
stopifnot(min(diag(mfvb_cov)) > 0)
fit_time <- Sys.time() - fit_time
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "variational_bayes/logit_glmm")
source(file.path(project_directory, "LogitGLMMLRVB/inst/optimize_lib.R"))
analysis_name <- "simulated_data"
data_directory <- file.path(project_directory, "LogitGLMMLRVB/inst/data/")
stan_draws_file <- file.path(data_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
stan_results <- environment()
load(stan_draws_file, envir=stan_results)
mcmc_sample <- extract(stan_results$stan_sim)
true_params <- stan_results$true_params
x <- stan_results$stan_dat$x
k_reg <- ncol(x)
n_obs <- nrow(x)
y <- stan_results$stan_dat$y
y_g <- stan_results$stan_dat$y_g
n_groups <- max(y_g) + 1
# Get C++ versions of the data structures.
prob <- SampleData(n_obs, k_reg, n_groups)
pp <- stan_results$pp
vp_nat <- prob$vp_nat
vp_nat$beta_loc <- rep(0, k_reg)
vp_nat$mu_loc <- 0
vp_nat$tau_alpha <- 2
vp_nat$tau_beta <- 2
for (g in 1:n_groups) {
vp_nat$u_vec[[g]]$u_loc <- 0
vp_nat$u_vec[[g]]$u_info <- 1
}
##############################
# Optimization
opt <- GetOptions(n_sim=15)
bounds <- GetVectorBounds()
optim_fns <- OptimFunctions(y, y_g, x, vp_nat, pp, opt)
theta_init <- GetNaturalParameterVector(vp_nat, TRUE)
fit_time <- Sys.time()
# Initialize with BFGS and finish with Newton.
cat("BFGS initialization.\n")
optim_result <- optim(theta_init, optim_fns$OptimVal, optim_fns$OptimGrad,
method="L-BFGS-B", lower=bounds$theta_lower, upper=bounds$theta_upper,
control=list(fnscale=-1, factr=1))
theta <- optim_result$par
cat("Newton's method.\n")
newton_result <- NewtonsMethod(optim_fns$OptimVal, optim_fns$OptimGrad, optim_fns$OptimHess,
theta_init=theta, verbose=TRUE, tol=1e-8, fn_scale=-1,
max_iters=20)
vp_nat_fit <- GetNaturalParametersFromVector(vp_nat, newton_result$theta, TRUE)
# LRVB
mfvb_cov <- GetCovariance(vp_nat_fit)
lrvb_cov <- GetLRVBCovariance(y, y_g, x, vp_nat_fit, pp, opt)
stopifnot(min(diag(lrvb_cov)) > 0)
stopifnot(min(diag(mfvb_cov)) > 0)
fit_time <- Sys.time() - fit_time
fit_time
mcmc_time
vp_mom <- GetMomentParametersFromNaturalParameters(vp_nat_fit)
lrvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(lrvb_cov)), FALSE)
mfvb_sd <- GetMomentParametersFromVector(vp_mom, sqrt(diag(mfvb_cov)), FALSE)
results <- SummarizeResults(mcmc_sample, vp_mom, mfvb_sd, lrvb_sd)
ggplot(
filter(results, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(is_u = par == "u")
) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(intercept=0, slope=1)) +
facet_grid(~ is_u)
ggplot(
filter(results, metric == "sd") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(is_u = par == "u")
) +
geom_point(aes(x=mcmc, y=mfvb, color="mfvb"), size=3) +
geom_point(aes(x=mcmc, y=lrvb, color="lrvb"), size=3) +
geom_abline(aes(intercept=0, slope=1)) +
facet_grid(~ is_u)
ggplot(
filter(results, metric == "sd", par == "u") %>%
dcast(par + component + group ~ method, value.var="val")
) +
geom_point(aes(x=mcmc, y=mfvb, color="mfvb"), size=3) +
geom_point(aes(x=mcmc, y=lrvb, color="lrvb"), size=3) +
expand_limits(x=0, y=0) +
xlab("MCMC (ground truth)") + ylab("VB") +
scale_color_discrete(guide=guide_legend(title="Method")) +
geom_abline(aes(intercept=0, slope=1))

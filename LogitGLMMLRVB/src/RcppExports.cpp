// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// SampleData
Rcpp::List SampleData(int n_obs, int k_reg, int n_groups);
RcppExport SEXP _LogitGLMMLRVB_SampleData(SEXP n_obsSEXP, SEXP k_regSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< int >::type k_reg(k_regSEXP);
    Rcpp::traits::input_parameter< int >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleData(n_obs, k_reg, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// GetMomentParameterVector
Eigen::VectorXd GetMomentParameterVector(const Rcpp::List r_vp, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetMomentParameterVector(SEXP r_vpSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMomentParameterVector(r_vp, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetNaturalParameterVector
Eigen::VectorXd GetNaturalParameterVector(const Rcpp::List r_vp, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetNaturalParameterVector(SEXP r_vpSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetNaturalParameterVector(r_vp, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetMomentParametersFromNaturalParameters
Rcpp::List GetMomentParametersFromNaturalParameters(Rcpp::List r_vp_nat);
RcppExport SEXP _LogitGLMMLRVB_GetMomentParametersFromNaturalParameters(SEXP r_vp_natSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type r_vp_nat(r_vp_natSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMomentParametersFromNaturalParameters(r_vp_nat));
    return rcpp_result_gen;
END_RCPP
}
// GetMomentParametersFromVector
Rcpp::List GetMomentParametersFromVector(const Rcpp::List r_vp_base, const Eigen::Map<Eigen::VectorXd> r_theta, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetMomentParametersFromVector(SEXP r_vp_baseSEXP, SEXP r_thetaSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp_base(r_vp_baseSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r_theta(r_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMomentParametersFromVector(r_vp_base, r_theta, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetNaturalParametersFromVector
Rcpp::List GetNaturalParametersFromVector(const Rcpp::List r_vp_base, const Eigen::Map<Eigen::VectorXd> r_theta, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetNaturalParametersFromVector(SEXP r_vp_baseSEXP, SEXP r_thetaSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp_base(r_vp_baseSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r_theta(r_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetNaturalParametersFromVector(r_vp_base, r_theta, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetEmptyPriorParameters
Rcpp::List GetEmptyPriorParameters(int k_reg);
RcppExport SEXP _LogitGLMMLRVB_GetEmptyPriorParameters(SEXP k_regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k_reg(k_regSEXP);
    rcpp_result_gen = Rcpp::wrap(GetEmptyPriorParameters(k_reg));
    return rcpp_result_gen;
END_RCPP
}
// GetPriorParametersFromVector
Rcpp::List GetPriorParametersFromVector(const Rcpp::List r_pp, const Eigen::Map<Eigen::VectorXd> r_theta, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetPriorParametersFromVector(SEXP r_ppSEXP, SEXP r_thetaSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r_theta(r_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPriorParametersFromVector(r_pp, r_theta, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetPriorParametersVector
Eigen::VectorXd GetPriorParametersVector(const Rcpp::List r_pp, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetPriorParametersVector(SEXP r_ppSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPriorParametersVector(r_pp, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetPriorsAndNaturalParametersFromVector
Rcpp::List GetPriorsAndNaturalParametersFromVector(const Rcpp::List r_vp_base, const Rcpp::List r_pp_base, const Eigen::Map<Eigen::VectorXd> r_theta, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetPriorsAndNaturalParametersFromVector(SEXP r_vp_baseSEXP, SEXP r_pp_baseSEXP, SEXP r_thetaSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp_base(r_vp_baseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp_base(r_pp_baseSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r_theta(r_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPriorsAndNaturalParametersFromVector(r_vp_base, r_pp_base, r_theta, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetPriorsAndNaturalParametersVector
Eigen::VectorXd GetPriorsAndNaturalParametersVector(const Rcpp::List r_vp_base, const Rcpp::List r_pp_base, bool unconstrained);
RcppExport SEXP _LogitGLMMLRVB_GetPriorsAndNaturalParametersVector(SEXP r_vp_baseSEXP, SEXP r_pp_baseSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp_base(r_vp_baseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp_base(r_pp_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type unconstrained(unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPriorsAndNaturalParametersVector(r_vp_base, r_pp_base, unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// GetLogLikDerivatives
Rcpp::List GetLogLikDerivatives(const Eigen::Map<Eigen::VectorXi> r_y, const Eigen::Map<Eigen::VectorXi> r_y_g, const Eigen::Map<Eigen::MatrixXd> r_x, const Rcpp::List r_vp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetLogLikDerivatives(SEXP r_ySEXP, SEXP r_y_gSEXP, SEXP r_xSEXP, SEXP r_vpSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y(r_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y_g(r_y_gSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type r_x(r_xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLogLikDerivatives(r_y, r_y_g, r_x, r_vp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetLogPriorDerivatives
Rcpp::List GetLogPriorDerivatives(const Rcpp::List r_vp, const Rcpp::List r_pp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetLogPriorDerivatives(SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLogPriorDerivatives(r_vp, r_pp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetFullModelLogPriorDerivatives
Rcpp::List GetFullModelLogPriorDerivatives(const Rcpp::List r_vp, const Rcpp::List r_pp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetFullModelLogPriorDerivatives(SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetFullModelLogPriorDerivatives(r_vp, r_pp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetLogVariationalDensityDerivatives
Rcpp::List GetLogVariationalDensityDerivatives(const Rcpp::List r_obs, const Rcpp::List r_vp, const Rcpp::List r_opt, bool global_only, bool include_beta, bool include_mu, bool include_tau);
RcppExport SEXP _LogitGLMMLRVB_GetLogVariationalDensityDerivatives(SEXP r_obsSEXP, SEXP r_vpSEXP, SEXP r_optSEXP, SEXP global_onlySEXP, SEXP include_betaSEXP, SEXP include_muSEXP, SEXP include_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_obs(r_obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    Rcpp::traits::input_parameter< bool >::type global_only(global_onlySEXP);
    Rcpp::traits::input_parameter< bool >::type include_beta(include_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mu(include_muSEXP);
    Rcpp::traits::input_parameter< bool >::type include_tau(include_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLogVariationalDensityDerivatives(r_obs, r_vp, r_opt, global_only, include_beta, include_mu, include_tau));
    return rcpp_result_gen;
END_RCPP
}
// GetMCMCLogPriorDerivatives
Rcpp::List GetMCMCLogPriorDerivatives(const Rcpp::List draw_list, const Rcpp::List r_pp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetMCMCLogPriorDerivatives(SEXP draw_listSEXP, SEXP r_ppSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type draw_list(draw_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMCMCLogPriorDerivatives(draw_list, r_pp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetELBODerivatives
Rcpp::List GetELBODerivatives(const Eigen::Map<Eigen::VectorXi> r_y, const Eigen::Map<Eigen::VectorXi> r_y_g, const Eigen::Map<Eigen::MatrixXd> r_x, const Rcpp::List r_vp, const Rcpp::List r_pp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetELBODerivatives(SEXP r_ySEXP, SEXP r_y_gSEXP, SEXP r_xSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y(r_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y_g(r_y_gSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type r_x(r_xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetELBODerivatives(r_y, r_y_g, r_x, r_vp, r_pp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetEntropyDerivatives
Rcpp::List GetEntropyDerivatives(const Rcpp::List r_vp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetEntropyDerivatives(SEXP r_vpSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetEntropyDerivatives(r_vp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetCovariance
Eigen::SparseMatrix<double> GetCovariance(const Rcpp::List r_vp);
RcppExport SEXP _LogitGLMMLRVB_GetCovariance(SEXP r_vpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCovariance(r_vp));
    return rcpp_result_gen;
END_RCPP
}
// GetMomentJacobian
Rcpp::List GetMomentJacobian(const Rcpp::List r_vp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetMomentJacobian(SEXP r_vpSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMomentJacobian(r_vp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetSparseLogLikHessian
Eigen::SparseMatrix<double> GetSparseLogLikHessian(const Eigen::Map<Eigen::VectorXi> r_y, const Eigen::Map<Eigen::VectorXi> r_y_g, const Eigen::Map<Eigen::MatrixXd> r_x, const Rcpp::List r_vp, const Rcpp::List r_pp, const Rcpp::List r_opt, const bool include_prior);
RcppExport SEXP _LogitGLMMLRVB_GetSparseLogLikHessian(SEXP r_ySEXP, SEXP r_y_gSEXP, SEXP r_xSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP r_optSEXP, SEXP include_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y(r_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y_g(r_y_gSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type r_x(r_xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_prior(include_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSparseLogLikHessian(r_y, r_y_g, r_x, r_vp, r_pp, r_opt, include_prior));
    return rcpp_result_gen;
END_RCPP
}
// GetSparseEntropyHessian
Eigen::SparseMatrix<double> GetSparseEntropyHessian(const Rcpp::List r_vp, const Rcpp::List r_opt);
RcppExport SEXP _LogitGLMMLRVB_GetSparseEntropyHessian(SEXP r_vpSEXP, SEXP r_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSparseEntropyHessian(r_vp, r_opt));
    return rcpp_result_gen;
END_RCPP
}
// GetSparseELBOHessian
Eigen::SparseMatrix<double> GetSparseELBOHessian(const Eigen::Map<Eigen::VectorXi> r_y, const Eigen::Map<Eigen::VectorXi> r_y_g, const Eigen::Map<Eigen::MatrixXd> r_x, const Rcpp::List r_vp, const Rcpp::List r_pp, const Rcpp::List r_opt, const bool include_prior);
RcppExport SEXP _LogitGLMMLRVB_GetSparseELBOHessian(SEXP r_ySEXP, SEXP r_y_gSEXP, SEXP r_xSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP r_optSEXP, SEXP include_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y(r_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type r_y_g(r_y_gSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type r_x(r_xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_opt(r_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_prior(include_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSparseELBOHessian(r_y, r_y_g, r_x, r_vp, r_pp, r_opt, include_prior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogitGLMMLRVB_SampleData", (DL_FUNC) &_LogitGLMMLRVB_SampleData, 3},
    {"_LogitGLMMLRVB_GetMomentParameterVector", (DL_FUNC) &_LogitGLMMLRVB_GetMomentParameterVector, 2},
    {"_LogitGLMMLRVB_GetNaturalParameterVector", (DL_FUNC) &_LogitGLMMLRVB_GetNaturalParameterVector, 2},
    {"_LogitGLMMLRVB_GetMomentParametersFromNaturalParameters", (DL_FUNC) &_LogitGLMMLRVB_GetMomentParametersFromNaturalParameters, 1},
    {"_LogitGLMMLRVB_GetMomentParametersFromVector", (DL_FUNC) &_LogitGLMMLRVB_GetMomentParametersFromVector, 3},
    {"_LogitGLMMLRVB_GetNaturalParametersFromVector", (DL_FUNC) &_LogitGLMMLRVB_GetNaturalParametersFromVector, 3},
    {"_LogitGLMMLRVB_GetEmptyPriorParameters", (DL_FUNC) &_LogitGLMMLRVB_GetEmptyPriorParameters, 1},
    {"_LogitGLMMLRVB_GetPriorParametersFromVector", (DL_FUNC) &_LogitGLMMLRVB_GetPriorParametersFromVector, 3},
    {"_LogitGLMMLRVB_GetPriorParametersVector", (DL_FUNC) &_LogitGLMMLRVB_GetPriorParametersVector, 2},
    {"_LogitGLMMLRVB_GetPriorsAndNaturalParametersFromVector", (DL_FUNC) &_LogitGLMMLRVB_GetPriorsAndNaturalParametersFromVector, 4},
    {"_LogitGLMMLRVB_GetPriorsAndNaturalParametersVector", (DL_FUNC) &_LogitGLMMLRVB_GetPriorsAndNaturalParametersVector, 3},
    {"_LogitGLMMLRVB_GetLogLikDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetLogLikDerivatives, 5},
    {"_LogitGLMMLRVB_GetLogPriorDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetLogPriorDerivatives, 3},
    {"_LogitGLMMLRVB_GetFullModelLogPriorDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetFullModelLogPriorDerivatives, 3},
    {"_LogitGLMMLRVB_GetLogVariationalDensityDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetLogVariationalDensityDerivatives, 7},
    {"_LogitGLMMLRVB_GetMCMCLogPriorDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetMCMCLogPriorDerivatives, 3},
    {"_LogitGLMMLRVB_GetELBODerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetELBODerivatives, 6},
    {"_LogitGLMMLRVB_GetEntropyDerivatives", (DL_FUNC) &_LogitGLMMLRVB_GetEntropyDerivatives, 2},
    {"_LogitGLMMLRVB_GetCovariance", (DL_FUNC) &_LogitGLMMLRVB_GetCovariance, 1},
    {"_LogitGLMMLRVB_GetMomentJacobian", (DL_FUNC) &_LogitGLMMLRVB_GetMomentJacobian, 2},
    {"_LogitGLMMLRVB_GetSparseLogLikHessian", (DL_FUNC) &_LogitGLMMLRVB_GetSparseLogLikHessian, 7},
    {"_LogitGLMMLRVB_GetSparseEntropyHessian", (DL_FUNC) &_LogitGLMMLRVB_GetSparseEntropyHessian, 2},
    {"_LogitGLMMLRVB_GetSparseELBOHessian", (DL_FUNC) &_LogitGLMMLRVB_GetSparseELBOHessian, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogitGLMMLRVB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

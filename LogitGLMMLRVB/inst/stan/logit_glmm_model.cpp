// Code generated by Stan version 2.12

#include <stan/model/model_header.hpp>

namespace logit_glmm_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class logit_glmm_model : public prob_grad {
private:
    int NG;
    int N;
    int K;
    vector<int> y;
    vector<vector_d> x;
    vector<int> y_group;
    matrix_d beta_prior_var;
    vector_d beta_prior_mean;
    double mu_prior_mean;
    double mu_prior_var;
    double tau_prior_alpha;
    double tau_prior_beta;
    double mu_prior_epsilon;
    double mu_prior_t;
public:
    logit_glmm_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    logit_glmm_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "logit_glmm_model_namespace::logit_glmm_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "NG", "int", context__.to_vec());
        NG = int(0);
        vals_i__ = context__.vals_i("NG");
        pos__ = 0;
        NG = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("x", "N", N);
        validate_non_negative_index("x", "K", K);
        x = std::vector<vector_d>(N,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
        context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N,K));
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < x_i_vec_lim__; ++i_vec__) {
            size_t x_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                x[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "y_group", "int", context__.to_vec(N));
        validate_non_negative_index("y_group", "N", N);
        y_group = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y_group");
        pos__ = 0;
        size_t y_group_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_group_limit_0__; ++i_0__) {
            y_group[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "beta_prior_var", "matrix_d", context__.to_vec(K,K));
        validate_non_negative_index("beta_prior_var", "K", K);
        validate_non_negative_index("beta_prior_var", "K", K);
        beta_prior_var = matrix_d(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("beta_prior_var");
        pos__ = 0;
        size_t beta_prior_var_m_mat_lim__ = K;
        size_t beta_prior_var_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < beta_prior_var_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < beta_prior_var_m_mat_lim__; ++m_mat__) {
                beta_prior_var(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("beta_prior_mean", "K", K);
        beta_prior_mean = vector_d(static_cast<Eigen::VectorXd::Index>(K));
        context__.validate_dims("data initialization", "beta_prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("beta_prior_mean");
        pos__ = 0;
        size_t beta_prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < beta_prior_mean_i_vec_lim__; ++i_vec__) {
            beta_prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "mu_prior_mean", "double", context__.to_vec());
        mu_prior_mean = double(0);
        vals_r__ = context__.vals_r("mu_prior_mean");
        pos__ = 0;
        mu_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "mu_prior_var", "double", context__.to_vec());
        mu_prior_var = double(0);
        vals_r__ = context__.vals_r("mu_prior_var");
        pos__ = 0;
        mu_prior_var = vals_r__[pos__++];
        context__.validate_dims("data initialization", "tau_prior_alpha", "double", context__.to_vec());
        tau_prior_alpha = double(0);
        vals_r__ = context__.vals_r("tau_prior_alpha");
        pos__ = 0;
        tau_prior_alpha = vals_r__[pos__++];
        context__.validate_dims("data initialization", "tau_prior_beta", "double", context__.to_vec());
        tau_prior_beta = double(0);
        vals_r__ = context__.vals_r("tau_prior_beta");
        pos__ = 0;
        tau_prior_beta = vals_r__[pos__++];
        context__.validate_dims("data initialization", "mu_prior_epsilon", "double", context__.to_vec());
        mu_prior_epsilon = double(0);
        vals_r__ = context__.vals_r("mu_prior_epsilon");
        pos__ = 0;
        mu_prior_epsilon = vals_r__[pos__++];
        context__.validate_dims("data initialization", "mu_prior_t", "double", context__.to_vec());
        mu_prior_t = double(0);
        vals_r__ = context__.vals_r("mu_prior_t");
        pos__ = 0;
        mu_prior_t = vals_r__[pos__++];

        // validate data
        check_greater_or_equal(function__,"NG",NG,0);
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"K",K,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            check_less_or_equal(function__,"y[k0__]",y[k0__],1);
        }
        check_greater_or_equal(function__,"mu_prior_var",mu_prior_var,0);
        check_greater_or_equal(function__,"tau_prior_alpha",tau_prior_alpha,0);
        check_greater_or_equal(function__,"tau_prior_beta",tau_prior_beta,0);
        check_greater_or_equal(function__,"mu_prior_epsilon",mu_prior_epsilon,0);
        check_less_or_equal(function__,"mu_prior_epsilon",mu_prior_epsilon,1);
        check_greater_or_equal(function__,"mu_prior_t",mu_prior_t,0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K;
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += NG;
    }

    ~logit_glmm_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(K));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("u")))
            throw std::runtime_error("variable u missing");
        vals_r__ = context__.vals_r("u");
        pos__ = 0U;
        context__.validate_dims("initialization", "u", "vector_d", context__.to_vec(NG));
        vector_d u(static_cast<Eigen::VectorXd::Index>(NG));
        for (int j1__ = 0U; j1__ < NG; ++j1__)
            u(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(u);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable u: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta;
        (void) beta;  // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.vector_constrain(K,lp__);
        else
            beta = in__.vector_constrain(K);

        T__ mu;
        (void) mu;  // dummy to suppress unused var warning
        if (jacobian__)
            mu = in__.scalar_constrain(lp__);
        else
            mu = in__.scalar_constrain();

        T__ tau;
        (void) tau;  // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.scalar_lb_constrain(0,lp__);
        else
            tau = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  u;
        (void) u;  // dummy to suppress unused var warning
        if (jacobian__)
            u = in__.vector_constrain(NG,lp__);
        else
            u = in__.vector_constrain(NG);


        // transformed parameters
        T__ mu_normal_lpdf;
        (void) mu_normal_lpdf;  // dummy to suppress unused var warning
        T__ mu_student_t_lpdf;
        (void) mu_student_t_lpdf;  // dummy to suppress unused var warning

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(mu_normal_lpdf,DUMMY_VAR__);
        stan::math::fill(mu_student_t_lpdf,DUMMY_VAR__);

        try {
            current_statement_begin__ = 52;
            stan::math::assign(mu_normal_lpdf, normal_log(mu,mu_prior_mean,mu_prior_var));
            current_statement_begin__ = 53;
            stan::math::assign(mu_student_t_lpdf, student_t_log(mu,mu_prior_t,mu_prior_mean,sqrt(mu_prior_var)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(mu_normal_lpdf)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: mu_normal_lpdf";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(mu_student_t_lpdf)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: mu_student_t_lpdf";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 58;
            lp_accum__.add(gamma_log<propto__>(tau, tau_prior_alpha, tau_prior_beta));
            current_statement_begin__ = 59;
            lp_accum__.add(multi_normal_log<propto__>(beta, beta_prior_mean, beta_prior_var));
            current_statement_begin__ = 62;
            if (as_bool(logical_eq(mu_prior_epsilon,0))) {
                current_statement_begin__ = 63;
                lp_accum__.add(normal_log<propto__>(mu, mu_prior_mean, mu_prior_var));
            } else if (as_bool(logical_eq(mu_prior_epsilon,1))) {
                current_statement_begin__ = 65;
                lp_accum__.add(student_t_log<propto__>(mu, mu_prior_t, mu_prior_mean, sqrt(mu_prior_var)));
            } else {
                current_statement_begin__ = 71;
                lp_accum__.add(2);
            }
            current_statement_begin__ = 78;
            for (int g = 1; g <= NG; ++g) {
                current_statement_begin__ = 79;
                lp_accum__.add(normal_log<propto__>(get_base1(u,g,"u",1), mu, (1 / tau)));
            }
            current_statement_begin__ = 82;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 85;
                lp_accum__.add(bernoulli_log<propto__>(get_base1(y,n,"y",1), inv_logit((multiply(transpose(get_base1(x,n,"x",1)),beta) + get_base1(u,(get_base1(y_group,n,"y_group",1) + 1),"u",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("mu");
        names__.push_back("tau");
        names__.push_back("u");
        names__.push_back("mu_normal_lpdf");
        names__.push_back("mu_student_t_lpdf");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "logit_glmm_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d beta = in__.vector_constrain(K);
        double mu = in__.scalar_constrain();
        double tau = in__.scalar_lb_constrain(0);
        vector_d u = in__.vector_constrain(NG);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        vars__.push_back(mu);
        vars__.push_back(tau);
        for (int k_0__ = 0; k_0__ < NG; ++k_0__) {
            vars__.push_back(u[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double mu_normal_lpdf(0.0);
        (void) mu_normal_lpdf;  // dummy to suppress unused var warning
        double mu_student_t_lpdf(0.0);
        (void) mu_student_t_lpdf;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 52;
            stan::math::assign(mu_normal_lpdf, normal_log(mu,mu_prior_mean,mu_prior_var));
            current_statement_begin__ = 53;
            stan::math::assign(mu_student_t_lpdf, student_t_log(mu,mu_prior_t,mu_prior_mean,sqrt(mu_prior_var)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        vars__.push_back(mu_normal_lpdf);
        vars__.push_back(mu_student_t_lpdf);

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "logit_glmm_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= NG; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_normal_lpdf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_student_t_lpdf";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= NG; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_normal_lpdf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_student_t_lpdf";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef logit_glmm_model_namespace::logit_glmm_model stan_model;

